// Lista de cupons v√°lidos e seus respectivos descontos
const cuponsValidos = {
  'DELFINS10': 0.10, // 10% de desconto
  'AMOPINKDELFINS': 0.20, // 20% de desconto
  'DELFINS5': 0.05 // 5% de desconto
};

// Mensagens que ser√£o exibidas ao aplicar um cupom
const mensagensCupons = {
  'DELFINS10': 'Voc√™ ganhou 10% de desconto!',
  'AMOPINKDELFINS': 'Voc√™ ganhou 20% de desconto!',
  'DELFINS5': 'Voc√™ ganhou 5% de desconto!'
};

// Recupera o carrinho do localStorage ou inicializa como vazio
const carrinho = JSON.parse(localStorage.getItem('carrinho')) || [];

// Fun√ß√£o para validar n√∫mero de cart√£o de cr√©dito usando o algoritmo de Luhn
function validarCartao(numero) {
  // Remove caracteres n√£o num√©ricos, inverte e converte em array de n√∫meros
  const digits = numero.replace(/\D/g, '').split('').reverse().map(d => parseInt(d, 10));
  let soma = 0;
  // Itera pelos d√≠gitos aplicando as regras do algoritmo
  digits.forEach((d, i) => {
    if (i % 2 === 1) { // Dobra os d√≠gitos das posi√ß√µes √≠mpares
      d *= 2;
      if (d > 9) d -= 9; // Se o resultado for maior que 9, subtrai 9
    }
    soma += d; // Soma acumulada
  });
  return soma % 10 === 0; // Valida√ß√£o final (deve ser m√∫ltiplo de 10)
}

// Fun√ß√£o para calcular o valor total com ou sem desconto aplicado
function calcularValores() {
  let valorOriginal = 0;
  // Soma o pre√ßo de todos os itens do carrinho
  carrinho.forEach(item => {
    valorOriginal += item.preco * item.quantidade;
  });

  // Recupera o cupom usado e verifica se √© v√°lido
  const cupomUsado = localStorage.getItem('cupomUsado');
  const descontoCupom = (cupomUsado && cuponsValidos[cupomUsado]) ? cuponsValidos[cupomUsado] : 0;

  // Calcula valor final aplicando o desconto
  const valorFinal = valorOriginal * (1 - descontoCupom);
  window.valorFinalCalculado = valorFinal; // Armazena para uso futuro

  // Exibe o valor final na interface, se o elemento existir
  const valorFinalSpan = document.getElementById('valor-final-span');
  if (valorFinalSpan) {
    valorFinalSpan.textContent = valorFinal.toFixed(2); // Formata para 2 casas decimais
  }
}

// Fun√ß√£o de pagamento com cart√£o
function pagarCartao() {
  const numero = prompt('Insira o n√∫mero do seu cart√£o (s√≥ n√∫meros):');
  if (!numero || !validarCartao(numero)) {
    alert('N√∫mero do cart√£o inv√°lido. Tente novamente.');
    return;
  }
  alert('Cart√£o v√°lido! Prosseguindo para confirma√ß√£o.');
  document.getElementById('qrcode-area').style.display = 'none'; // Esconde QR Code (caso vis√≠vel)
}

// NOVA FUN√á√ÉO PIX REAL
function pagarPIX() {
  calcularValores(); // Garante que o valor final esteja atualizado

  const valor = window.valorFinalCalculado.toFixed(2); // Valor em string com 2 casas
  const chavePix = '02964990999'; // Chave Pix do recebedor
  const nomeRecebedor = 'Celso Mainko'; // Nome do recebedor
  const cidade = 'SAO PAULO'; // Cidade do recebedor
  const descricao = 'Pagamento Doceria Pink Delfins'; // Descri√ß√£o da transa√ß√£o

  // Fun√ß√£o auxiliar para formatar campos do payload Pix
  function formatField(id, value) {
    const length = value.length.toString().padStart(2, '0'); // Comprimento em 2 d√≠gitos
    return id + length + value; // Concatena campo ID, tamanho e valor
  }

  // Constr√≥i o payload Pix sem o CRC ainda
  let payloadSemCRC =
    formatField("00", "01") +
    formatField("26",
      formatField("00", "BR.GOV.BCB.PIX") +
      formatField("01", chavePix) +
      formatField("02", descricao)
    ) +
    formatField("52", "0000") + // C√≥digo de categoria (sem categoria)
    formatField("53", "986") + // C√≥digo da moeda (BRL)
    formatField("54", valor) + // Valor da transa√ß√£o
    formatField("58", "BR") + // Pa√≠s
    formatField("59", nomeRecebedor) + // Nome do recebedor
    formatField("60", cidade) + // Cidade do recebedor
    formatField("62", formatField("05", "***")) + // Identificador adicional (***)
    "6304"; // In√≠cio do campo de CRC

  // Fun√ß√£o para gerar o c√≥digo CRC16 do payload Pix
  function crc16(str) {
    let crc = 0xFFFF;
    for (let c = 0; c < str.length; c++) {
      crc ^= str.charCodeAt(c) << 8;
      for (let i = 0; i < 8; i++) {
        if ((crc & 0x8000) !== 0) {
          crc = (crc << 1) ^ 0x1021;
        } else {
          crc <<= 1;
        }
        crc &= 0xFFFF;
      }
    }
    return crc.toString(16).toUpperCase().padStart(4, '0'); // Retorna em hexadecimal com 4 d√≠gitos
  }

  const crc = crc16(payloadSemCRC); // Calcula o CRC
  const payloadFinal = payloadSemCRC + crc; // Adiciona CRC ao payload

  const qrCodeDiv = document.getElementById('qrcode');
  qrCodeDiv.innerHTML = ''; // Limpa conte√∫do anterior do QR code
  document.getElementById('qrcode-area').style.display = 'block'; // Mostra a √°rea do QR code

  // Gera o QR code usando a biblioteca QRCode.js
  new QRCode(qrCodeDiv, {
    text: payloadFinal, // Texto do QR Code (payload Pix)
    width: 250,
    height: 250,
    colorDark: '#000000',
    colorLight: '#ffffff',
    correctLevel: QRCode.CorrectLevel.H
  });

  // Cria e adiciona um elemento com informa√ß√µes do pagamento abaixo do QR code
  const info = document.createElement('div');
  info.className = 'nome-valor';
  info.innerHTML = `
    <p><strong>Nome:</strong> ${nomeRecebedor}</p>
    <p><strong>CPF (PIX):</strong> ${chavePix}</p>
    <p><strong>Valor:</strong> R$ ${valor}</p>
  `;
  qrCodeDiv.appendChild(info);
}

// Fun√ß√£o chamada ao confirmar o pagamento
function confirmarPagamento() {
  confettiAnimation(); // Anima√ß√£o de confete
  setTimeout(() => {
    alert('Pagamento confirmado com sucesso! üéâ');
    localStorage.removeItem('carrinho'); // Limpa carrinho
    localStorage.removeItem('cupomUsado'); // Limpa cupom
    window.location.href = '../principal/index.html'; // Redireciona para p√°gina inicial
  }, 2000);
}

// Voltar para p√°gina principal
function voltar() {
  window.location.href = '../principal/index.html';
}

// Anima√ß√£o de confete (usando biblioteca externa)
function confettiAnimation() {
  const duration = 2000; // Dura√ß√£o da anima√ß√£o
  const end = Date.now() + duration;
  const defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 };
  const interval = setInterval(() => {
    const timeLeft = end - Date.now();
    if (timeLeft <= 0) return clearInterval(interval); // Encerra a anima√ß√£o ap√≥s o tempo
    confetti({
      particleCount: 50, // N√∫mero de part√≠culas por vez
      origin: { x: Math.random(), y: Math.random() - 0.2 }, // Posi√ß√£o aleat√≥ria
      ...defaults
    });
  }, 200);
}

// Executa a fun√ß√£o de c√°lculo de valores ao carregar a p√°gina
window.onload = calcularValores;
